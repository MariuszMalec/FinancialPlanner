@using FinancialPlanner.Logic.Enums;
@using FinancialPlanner.Logic.Interfaces;
@model FinancialPlanner.Logic.Dtos.TransactionUserDto
@inject IUserService userService

@{
    ViewData["Title"] = "Create transaction";
}

<h1>Create</h1>

@{
    var userId = ViewData["UserId"];
    var balance = Convert.ToDecimal(ViewData["MontlyBalance"]);
    var fullName = "";
    if (userId != null)
    {
        var user = userService.GetById(userId.ToString()).Result;
        fullName = $"{user.FirstName} {user.LastName}";
        balance = Convert.ToDecimal(ViewData["MontlyBalance"]);
    }
    else
    {
        var users = userService.GetAll().Result;
        userId = users.Select(u => u.Id).FirstOrDefault();
        var user = userService.GetById(userId.ToString()).Result;
        fullName = $"{user.FirstName} {user.LastName}";
        var getBalance = users.Where(u => u.Id == userId).Select(u => u.Balance).FirstOrDefault();
        balance = Convert.ToDecimal(getBalance);
    }
}

@{
    var incomeList = Html.GetEnumSelectList<CategoryOfTransaction>().Where(l => int.Parse(l.Value) > 1 && int.Parse(l.Value) < 100).ToList();
    var outcomeList = Html.GetEnumSelectList<CategoryOfTransaction>().Where(l => int.Parse(l.Value) > 100).ToList();
    var typeList = Html.GetEnumSelectList<TypeOfTransaction>().Where(l => int.Parse(l.Value) > 0).ToList();
    var typeListCategory = Html.GetEnumSelectList<CategoryOfTransaction>().Where(l => int.Parse(l.Value) > 100).ToList();

}

@if (balance < 2400 && balance >= 1000)
{
    <h2 style="color:green">MontlyBalance:  @balance</h2>
}
else if (balance < 1000 && balance >= 300)
{
    <h2 style="color:orange">MontlyBalance:  @balance</h2>
}
else if (balance < 300)
{
    <h2 style="color:red">MontlyBalance:  @balance</h2>
}
else
{
    <h2>MontlyBalance:  @balance</h2>
}

<h4>Transaction : @fullName</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="CreateNext" asp-route-id=@ViewData["UserId"]>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Type" class="control-label"></label>
                <select onclick="myFunction()" asp-for="Type" id="transactionTypeSelect" asp-items="typeList" class="form-control">
                    <option selected="selected" value="">Please select</option>
                </select>
                <span asp-validation-for="Type" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Category" class="control-label"></label>
                <select asp-for="Category" id="categorySelect" asp-items="new List<SelectListItem>()" class="form-control">
                    <option selected="selected" value="">Please select</option>
                </select>
                <span asp-validation-for="Category" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Amount" class="control-label"></label>
                <input asp-for="Amount" class="form-control" />
                <span asp-validation-for="Amount" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Description" class="control-label"></label>
                <input asp-for="Description" class="form-control" />
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CreatedAt" class="control-label"></label>
                <input asp-for="CreatedAt" class="form-control" />
                <span asp-validation-for="CreatedAt" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="CreateNext" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-controller="User" asp-action="GetUserTransactions" asp-route-id=@ViewData["UserId"]>Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<script>
    function myFunction() {
        $(document).ready(function () {
            var outcomeOptions = @Html.Raw(Json.Serialize(outcomeList));
            var incomeOptions = @Html.Raw(Json.Serialize(incomeList));
            var categorySelect = $('#categorySelect');
            $('#transactionTypeSelect').change(function () {
                categorySelect.empty();
                var selected = $(this).val();
                if (selected === '1') {
                    addOptionsToSelect(incomeOptions);
                }
                if (selected === '2') {
                    addOptionsToSelect(outcomeOptions);
                }
            });
            function addOptionsToSelect(options) {
                options.forEach(function (i, item) {
                    categorySelect.append($('<option>',
                        {
                            value: i.value,
                            text: i.text
                        }));
                });
            }
        });
    }
</script>