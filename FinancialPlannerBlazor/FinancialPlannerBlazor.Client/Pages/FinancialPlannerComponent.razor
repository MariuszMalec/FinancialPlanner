@namespace FinancialPlannerBlazor.Client.Pages

@page "/users"

@rendermode InteractiveServer

@inject IUserService userService
@inject IRepository<User> repoService

@using FinancialPlanner.Logic.Interfaces
@using FinancialPlanner.Logic.Models
@using FinancialPlanner.Logic.Repository
@using FinancialPlannerBlazor.Client.Models
@using FinancialPlannerBlazor.Client.Pages.Components

<div class="row d-flex">
	<div class="col-3 justify-content-start">
		<h3>Financial Planner</h3>
	</div>
	<div class="col-9 justify-content-end">
		<div class="btn-group" role="group">
			<AddUserModal InsertUser="InsertOrUpdateUser" />
			<RemoveUserModal RemoveUser="RemoveUser" Users="users"/>
		</div>
	</div>
</div>

<table class="table table-bordered align-middle">
	<thead class="table-primary">
		<tr class="fw-bold text-center d-flex">
			<td class="col-1">LastName</td>
		</tr>
	</thead>
	<tbody>
		@foreach (var user in users)
		{
			<tr class=" d-flex">
				<td class="col-1">@user.LastName</td>
				<td class="col-1">@user.FirstName</td>
				<td class="col-1">@user.Balance</td>
				<td class="col-2">@user.Email</td>
				@* <td class="col-1"><Button Color="ButtonColor.Danger">Remove</Button></td> *@
			</tr>
		}
	</tbody>

</table>

@code {
	protected override async Task OnInitializedAsync()
	{
		//await Task.Run(() => users = GenerateUsers());
		users = (await repoService.GetAll()).ToList();
	}

	public List<User> users = [];

	private async Task InsertOrUpdateUser(User user)
	{
		var newUser = await repoService.Insert(user);
		if (newUser is null) return;

		var existingUser = users.FirstOrDefault(e => e.Email == newUser.Email);
		if (existingUser is not null)
		{
			users.Remove(existingUser);
		}
		users.Add(newUser);
    }

	private async Task RemoveUser(User employee)
	{
		if (employee is null) return;
		await repoService.Delete(employee);
		users.Remove(employee);
	}

}