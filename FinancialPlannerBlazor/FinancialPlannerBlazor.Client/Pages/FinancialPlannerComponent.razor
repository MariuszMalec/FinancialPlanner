@namespace FinancialPlannerBlazor.Client.Pages

@page "/users"

@inject IUserService userService
@inject IRepository<User> repoService

@using FinancialPlanner.Logic.Interfaces
@using FinancialPlanner.Logic.Models
@using FinancialPlanner.Logic.Repository
@using FinancialPlannerBlazor.Client.Pages.Components

<div class="row d-flex">
	<div class="col-3 justify-content-start">
		<h3>Financial Planner</h3>
	</div>
	<div class="col-9 justify-content-end">
		<div class="btn-group" role="group">
			<AddUserModal InsertUser="InsertOrUpdateUser" />
		</div>
	</div>
</div>

<table class="table table-bordered align-middle">
	<thead class="table-primary">
		<tr class="fw-bold text-center d-flex">
			<td class="col-1">FirstName</td>
			<td class="col-1">LastName</td>
			<td class="col-2">Email</td>
			<td class="col-1">Action</td>
		</tr>
	</thead>
		<tbody>
	@foreach(var user in users)
	{
	<tr class=" d-flex">
		<td class="col-1">@user.FirstName</td>
		<td class="col-1">@user.LastName</td>
		<td class="col-2">@user.Email</td>
		<td class="col-1"><Button Color="ButtonColor.Danger">Remove</Button></td>
		
	</tr>
	}
	</tbody>

</table>

@code {
	protected override async Task OnInitializedAsync()
	{
		users = (await userService.GetAllQueryable()).ToList(); 
	}

	public List<User> users = [];

	private async Task InsertOrUpdateUser(User user)
	{
		var newEmployee = await userService.InsertUser(user);
		if (newEmployee is null) return;

		var existingEmployee = users.FirstOrDefault(e => e.Id == newEmployee.Id);
		if (existingEmployee is not null)
		{
			users.ToList().Remove(existingEmployee);
		}
		users.ToList().Add(newEmployee);
	}
}