@namespace FinancialPlannerBlazor.Client.Pages.Components
@using FinancialPlanner.Logic.Context
@using FinancialPlanner.Logic.Interfaces
@using FinancialPlanner.Logic.Models
@using FinancialPlanner.Logic.Enums
@using FinancialPlanner.Logic.Repository
@using FinancialPlannerBlazor.Client.Models

@rendermode InteractiveServer

@inject ITransactionService userService
@inject IRepository<Transaction> repoService
@inject ApplicationDbContext _context

<Button Color="ButtonColor.Primary" @ref="addButton" @onclick="OnShowModalClick">
	<Icon Name="IconName.Plus"/> Add new transaction
</Button>

<Modal @ref="modal" Title="Add transaction" ShowCloseButton="true">
	<BodyTemplate>

		<img src="https://images.unsplash.com/photo-1614995008867-32eef7bff38c?q=80&w=1974&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D" alt=""
			 style="object-fit:scale-down;
                            width:50%;
                            height:auto;
                            border: solid 1px #CCC">


		<div class="row">
			<label>Email:</label>
            <InputText @bind-Value="this.Transaction.User.Email"/>
		</div>

		<select class="form-select" @onchange="OnChangeType">
            @if (this.Transaction is null)
            {
                @foreach (var type in Enum.GetNames(typeof(TypeOfTransaction)))
                {
                    <option selected="@(type.ToString() == type)">@type</option>
                }
            }
            else
            {
                var selectedType = this.Transaction.Type.ToString();
                @foreach (var type in Enum.GetNames(typeof(TypeOfTransaction)))
                {
                    <option selected="@(type.ToString() == selectedType)">@type</option>
                }
            }
        </select>

        <select class="form-select" @onchange="OnChangeCategory">

            @if (this.Transaction is null)
            {
                @foreach (var category in Enum.GetNames(typeof(CategoryOfTransaction)))
                {
                    <option selected="@(category.ToString() == category)">@category</option>
                }
            }
            else
            {
                var selectedcategory = this.Transaction.Category.ToString();
                @foreach (var category in Enum.GetNames(typeof(CategoryOfTransaction)))
                {
                    <option selected="@(category.ToString() == selectedcategory)">@category</option>
                }                
            }   
		</select>

        <div class="row">
            <label>Description:</label>
            @{
                if (description == string.Empty)
                    description = this.Transaction.Description;
            }
            <InputText @bind-Value="description" />
        </div>

        <div class="row">
            <label>Amount:</label>
            @{
                if (amount == 0.0m)
                    amount = this.Transaction.Amount;
            }
            <InputNumber TValue="decimal" @bind-Value="amount" />
        </div>

        <label>CreatedAt</label>
        <InputDate TValue="DateTime" @bind-Value="this.Transaction.CreatedAt"  />


	</BodyTemplate>
	<FooterTemplate>
		@if (Transaction is not null)
		{
			<Button class="d-flex" Color="ButtonColor.Danger" @onclick="OnTransactionRemove">Remove</Button>
		}
		<Button Color="ButtonColor.Primary" @onclick="InsertOrUpdate">@confirmButtonText</Button>
			<Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Close</Button>
	</FooterTemplate>
</Modal>

    @code {
    [Parameter]
    public Transaction? Transaction { get; set; }

    [Parameter]
    public EventCallback<Transaction> InsertTransaction { get; set; }

    [Parameter]
    public EventCallback<Transaction> OnTransactionInsertOrUpdate { get; set; }

    private Modal modal = new();

    private decimal amount { get; set; } = 0.0m;
    private string description { get; set; } = string.Empty;
    private string Email { get; set; } = string.Empty;
    private DateTime createdAt { get; set; } = DateTime.Now;
    private TypeOfTransaction type = TypeOfTransaction.Outcome;
    private CategoryOfTransaction category = CategoryOfTransaction.Home;

    private string confirmButtonText => this.Transaction is null ? "Add" : "Edit";

    private Button addButton;

    private async Task InsertOrUpdate()
    {
        Transaction? transaction = null;

        if (Transaction is null)
        {
            // Transaction = new Transaction()
            //     {
            //         Type = type,
            //         Category = category;
            //         Description = description,
            //         createdAt = createdAt,                  
            // };
        }
        else
        {
            Transaction.Type = type;
            Transaction.Category = category;
            Transaction.Amount = amount;
            Transaction.Description = description;
            Transaction.CreatedAt = createdAt;
            transaction = Transaction;
        }
        await OnTransactionInsertOrUpdate.InvokeAsync(transaction);
        await modal.HideAsync();
    }


    private Task OnTransactionRemove(MouseEventArgs e)
    {
        throw new NotImplementedException();
    }

    private void OnChangeType(ChangeEventArgs e)
    {
        Enum.TryParse<TypeOfTransaction>(e.Value!.ToString(), out var selectedType);
        type = selectedType;
    }

    private void OnChangeCategory(ChangeEventArgs e)
    {
        Enum.TryParse<CategoryOfTransaction>(e.Value!.ToString(), out var selectedCategory);
        category = selectedCategory;
    }

    private async Task OnShowModalClick() => await modal.ShowAsync();

    private async Task OnHideModalClick() => await modal.HideAsync();

}
