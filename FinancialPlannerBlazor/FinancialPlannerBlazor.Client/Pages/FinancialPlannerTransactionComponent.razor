@namespace FinancialPlannerBlazor.Client.Pages

@page "/transactions"

@rendermode InteractiveServer

@inject ITransactionService transactionService
@inject IRepository<Transaction> repoService
@inject ApplicationDbContext _context
@inject IJSRuntime JsRuntime

@using FinancialPlanner.Logic.Context
@using FinancialPlanner.Logic.Dtos
@using FinancialPlanner.Logic.Interfaces
@using FinancialPlanner.Logic.Models
@using FinancialPlanner.Logic.Enums
@using FinancialPlanner.Logic.Repository
@using FinancialPlanner.Logic.Validation
@using FinancialPlannerBlazor.Client.Models
@using FinancialPlannerBlazor.Client.Pages.Components

<div class="row d-flex">
	<div class="col-3 justify-content-start">
		<h3>Financial Planner</h3>
	</div>
	<div class="col-9 justify-content-end">
		<div class="btn-group" role="group">
			<AddTransactionModal InsertTransaction="InsertOrUpdateTransaction" Transactions="transactions" />
@* 			<RemoveTransactionModal RemoveTransaction="RemoveTransaction" Transactions="transactions"/> *@
		</div>
	</div>
</div>

<table class="table table-bordered align-middle">
	<thead class="table-primary">
		<tr class="fw-bold text-center d-flex">
			<td class="col-2">Email</td>
			<td class="col-1">Type</td>
			<td class="col-1">Category</td>
			<td class="col-3">Description</td>
			<td class="col-1">Amount</td>
		</tr>
	</thead>
	<tbody>
		@foreach (var transaction in transactions)
		{
			<tr class="d-flex">
				<td class="col-2">@transaction.User.Email</td>				
				<td class="col-1">@transaction.Type</td>
				<td class="col-1">@transaction.Category</td>
				<td class="col-3">@transaction.Description</td>
				<td class="col-1">@transaction.Amount</td>

					@switch (transaction.Type)
					{
						case TypeOfTransaction.Outcome:
							<td class="col-2" style="background-color: blue;">
								<div class="d-grid gap-2">
								<AddTransactionModal InsertTransaction="InsertOrUpdateTransaction" Transaction="transaction" />
								</div>
						</td>
							break;
						case TypeOfTransaction.Income:
							<td class="col-2" style="background-color: green;">
								<div class="d-grid gap-2" >
								<AddTransactionModal InsertTransaction="InsertOrUpdateTransaction" Transaction="transaction" />
								</div>
							</td>
							break;
						default:
							<td class="col-2" style="background-color: saddlebrown;">
								<div class="d-grid gap-2" >
								<AddTransactionModal InsertTransaction="InsertOrUpdateTransaction" Transaction="transaction" />
								</div>
							</td>
							break;
					}			
			</tr>
		}
	</tbody>

</table>

@code {

	[Parameter]
	public Transaction? Transaction { get; set; }

	private Modal modal = new();

	private Button addButton;

	private TypeOfTransaction transactionType { get; set; }

	protected override async Task OnInitializedAsync()
	{
		transactions = (await transactionService.GetAllQueryable()).ToList();
	}

	public List<Transaction> transactions = [];

	private async Task InsertOrUpdateTransaction(Transaction transaction)
	{
		//var newTransaction = await repoService.Insert(transaction);

		var transactionUserDto = new TransactionUserDto()
		{
				UserId = transaction.UserId,
				Id = transaction.Id,
				Currency = transaction.Currency,
				Type = transaction.Type,
				Category = transaction.Category,
				Amount = transaction.Amount,
				Description = transaction.Description,
				CreatedAt = transaction.CreatedAt,
		};


		await transactionService.Insert(transaction.User.Id, transactionUserDto);
		//if (newTransaction is null) return;

		var existingTransaction = transactions.FirstOrDefault(e => e.Id == transactionUserDto.Id);
		if (existingTransaction is not null)
		{
			transactions.Remove(existingTransaction);
		}
		transactions.Add(transaction);
	}

	private async Task RemoveTransaction(Transaction transaction)
	{
		// var errorMessage = UserValidate.Delete(user, _context);//TODO uzycie middleware
		// if (errorMessage is not "")
		// {
		// 	await JsRuntime.InvokeVoidAsync("alert", $"{errorMessage}"); // Alert
		// 	return;
		// }

		// if (user is null) return;
		// await repoService.Delete(user);
		// users.Remove(user);
	}

	private ButtonColor GetButtonColor(TypeOfTransaction typeOfTransaction)
	{
		switch (typeOfTransaction)
		{
			case TypeOfTransaction.Outcome:
				return ButtonColor.Info;
			case TypeOfTransaction.Income:
				return ButtonColor.Success;

			default:
				return ButtonColor.Secondary;
		}
	}

	// private ButtonColor GetButtonColor() => Transaction?.Type switch
	// {		
	// 	TypeOfTransaction transactionType when transactionType == TypeOfTransaction.Outcome => ButtonColor.Primary,
	// 	TypeOfTransaction transactionType when transactionType == TypeOfTransaction.Income => ButtonColor.Info,
	// 	_ => ButtonColor.Secondary
	// };

}